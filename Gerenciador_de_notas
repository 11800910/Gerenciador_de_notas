#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include <stdbool.h>
#include <math.h>

typedef struct { 
    char nome[15];
    char sobrenome[15];
    int nusp; 
    float P1, P2, Tf; //prova 1, prova 2, trabalho final
    float mf; //media final
} aluno; 

void limparBuffer(void){
    char c;
    while((c = getchar()) != '\n' && c != EOF);
}

void menu( int *n_alunos){

    printf("\n ------------------------------");
    printf("\n|             MENU             |");
    printf("\n ------------------------------");
    printf("\n > 1. Cadastrar nova turma");
    printf("\n > 2. Procurar Aluno");
    printf("\n > 3. Estatisticas das turmas");
    printf("\n > 4. Salvar");
    printf("\n > 5. Encerrar\n");
}

void realiza_acao( int *acao){

    printf("\nDigite a acao que deseja realizar: "); scanf("%d", *&acao);
}

void criar_turma( int *n_alunos){

    printf("\nNumero de alunos: "); scanf("%i", &*n_alunos);
}

void menorq10(float *nota){
    if(*nota>10 && nota<0){
        printf("\nO numero digitado é invalido\ntente novamente:");
        *nota= -1;
    }
}

void aloc_din_aluno( int n_alunos){

    aluno *alunos= (aluno *)calloc(n_alunos, sizeof( aluno));
    return *alunos;
}

void info_alunos( aluno *alunos, int *n_alunos){
    
    for(int i=0; i<*n_alunos; i++){
        
        printf("\nAluno %i\n", i);
        
        printf("\nNome: "); scanf("%s[^\n]", (alunos[i].nome));
        printf("\nSobrenome: "); scanf("%s[^\n]", alunos[i].sobrenome);
        limparBuffer();
        printf("\nNumero usp: "); scanf("%i", &(alunos[i].nusp));
        printf("\nNota da P1: "); scanf("%f", &(alunos[i].P1));
        //menorq10(&alunos[i].P1); 
        printf("\nNota da P2: "); scanf("%f", &(alunos[i].P2));
        printf("\nNota do trabalho: "); scanf("%f", &(alunos[i].Tf));
        
        alunos[i].mf= alunos[i].P1 + alunos[i].P2 + alunos[i].Tf;
        alunos[i].mf= alunos[i].mf/3;
    }
}

void printa( aluno *alunos, int i){
        system("clear");
        printf("\nNome: %s", alunos[i].nome);
        printf("\nSobrenome: %s", alunos[i].sobrenome);
        printf("\nNumero usp: %i",  alunos[i].nusp);
        printf("\nNota da P1: %.2f", alunos[i].P1);
        printf("\nNota da P2: %.2f", alunos[i].P2);
        printf("\nNota do trabalho: %.2f", alunos[i].Tf);
        printf("\nMedia final: %.2f", alunos[i].mf); printf("\n");
        alunos[i].mf>= 5? printf("\nO aluno passou com media final %f", alunos[i].mf) : printf("\nO aluno NAO passou! A media final foi de %f", alunos[i].mf);
}

int procura_aluno_rec( aluno *alunos, int pos, int n_alunos, char nome_proc[], char sobrenome_proc[]){
    
    if(pos >n_alunos){
        printf("\nAluno não encontrado");
        return -1;
    }
    if(strcmp(nome_proc, alunos[pos].nome)==0){
        if(strcmp(sobrenome_proc, alunos[pos].sobrenome)==0){
            printf("\nAluno Enconrado com sucesso: ");
            return pos; 
        } else{
            pos= pos + 1;
            procura_aluno_rec(alunos, pos, n_alunos, nome_proc, sobrenome_proc);
        }
    } else{
        pos= pos + 1;
        procura_aluno_rec(alunos, pos, n_alunos, nome_proc, sobrenome_proc);
    }
}

void procura_aluno_base( aluno *alunos, int *n_alunos){
    char nome_proc[15], sobrenome_proc[15];
    int pos=0;
    //system("clear");
        
    printf("\nDigite o nome do aluno procurado: "); scanf("%s[^\n]", nome_proc);
    printf("\nSobrenome: "); scanf("%s[^\n]", sobrenome_proc);
        
    pos= procura_aluno_rec(alunos, pos, n_alunos, nome_proc, sobrenome_proc);
    pos== -1? printf("\nvish... vamo ter que comecar a busca dnv\n") : printa( alunos, pos);
}

void estats( aluno *alunos, int *n_alunos){
    
    int l_turmas, c_info;
    //turmas| media P1 | media P2 | media trabalho | media final | % de aprovados
    float media_P1=0, media_P2=0, media_Tf=0, p_aprovados=0;
    int i=0;
    
    while( i<*n_alunos){
        media_P1= media_P1 + alunos[i].P1;
        i++;
    } i=0;
    media_P1= (media_P1)/(*n_alunos);

    while( i<*n_alunos){
        media_P2= media_P2 + alunos[i].P2;
        i++;
    } i=0; 
    media_P2= (media_P2)/(*n_alunos);

    while( i<*n_alunos){
        media_Tf= media_Tf + alunos[i].Tf;
        i++;
    } i=0; 
    media_Tf= (media_Tf)/(*n_alunos);

    while( i<*n_alunos){
        alunos[i].mf > 4? (p_aprovados= p_aprovados+1) : (p_aprovados= p_aprovados+ 0); 
        i++;
    } i=0;
    p_aprovados= (p_aprovados)/(*n_alunos);

    printf("\nturmas| media P1 | media P2 | media trabalho | media final | porcentagem de aprovados");
    while(i<*n_alunos){ //MUDAR PRA NUMERO DE TURMAS
        printf("\n  %i   |   %.2f  |    %.2f   |      %.2f     |     %.2f     |      %.2f    ", i, media_P1, media_P2, media_Tf, alunos[i].mf, p_aprovados);
        i++;
    }
}

void salvar_file(int *n_turmas){
    
    typedef struct {char nome[15];} tipo_nome; 
    tipo_nome nome_file[*n_turmas];
    for(int i= 0; i< n_turmas; i++){
        printf("\nDigite o nome do arquivo #%i para armazenar as informações dos alunos: ", i); scanf("%s", nome_file);
        FILE *file= fopen(nome_file, "w");
        //fwrite();
    }
}

int main(int argc, char *argv[]){

    //aluno *turma[10];

    int n_alunos;
    int acao;
    int i=0;
   
    while(1){
        
        menu( &n_alunos);
        realiza_acao( &acao);
        
        switch (acao){
        
        case 1:    
            system("clear");
            criar_turma( &n_alunos);
            aluno *alunos= (aluno *)calloc(n_alunos, sizeof( aluno));
            info_alunos( alunos, &n_alunos); 
            break;
        case 2:    
            system("clear");
            procura_aluno_base( alunos, n_alunos);
            break;
        case 3:  
            system("clear");
            estats(alunos, &n_alunos);
            break;
        case 4:
            system("clear");   
            printf("\n#4");
            break;
        case 5:    
            system("clear");
            free(alunos);
            exit(0);
            break;
        default:
            break;
        }
        aluno **turmas= (aluno *)malloc(sizeof(aluno));
        
        //aluno *alunos= (aluno *)calloc(n_alunos, sizeof( aluno));
    }

    printf("\n\n");
return 0; 
}
