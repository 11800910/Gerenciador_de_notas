#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include <stdbool.h>
#include <math.h>

typedef struct { 
    char nome[15];
    char sobrenome[15];
    int nusp; 
    float P1, P2, Tf; //prova 1, prova 2, trabalho final
    float mf; //media final
} aluno; 

void limparBuffer(void){
    char c;
    while((c = getchar()) != '\n' && c != EOF);
}

void menu(){

    printf("\n ------------------------------");
    printf("\n|             MENU             |");
    printf("\n ------------------------------");
    printf("\n > 1. Cadastrar nova turma");
    printf("\n > 2. Procurar Aluno");
    printf("\n > 3. Estatisticas das turmas");
    printf("\n > 4. Salvar");
    printf("\n > 5. Encerrar\n");
}

void criar_turma( int n_alunos[], int n_turmas){

    printf("\nNumero de alunos: "); scanf("%i", &n_alunos[n_turmas]);
}

void info_alunos( aluno **turmas, int n_alunos[], int n_turmas){
    
    for(int i=0; i<n_alunos[n_turmas]; i++){
        
        printf("\nAluno %i\n", i);
        
        printf("\nNome: "); scanf("%s[^\n]", (turmas[n_turmas][i].nome));
        printf("\nSobrenome: "); scanf("%s[^\n]", turmas[n_turmas][i].sobrenome);
        limparBuffer();
        printf("\nNumero usp: "); scanf("%i", &(turmas[n_turmas][i].nusp));
        printf("\nNota da P1: "); scanf("%f", &(turmas[n_turmas][i].P1));
        //menorq10(&turmas[i].P1); 
        printf("\nNota da P2: "); scanf("%f", &(turmas[n_turmas][i].P2));
        printf("\nNota do trabalho: "); scanf("%f", &(turmas[n_turmas][i].Tf));
        
        turmas[n_turmas][i].mf= turmas[n_turmas][i].P1 + turmas[n_turmas][i].P2 + turmas[n_turmas][i].Tf;
        turmas[n_turmas][i].mf= turmas[n_turmas][i].mf/3;
    }
}

void printa( aluno **turmas, int coluna, int linha){

        system("clear");
        printf("\nAlnuno encontrado!!");
        printf("\nNome: %s", turmas[linha][coluna].nome);
        printf("\nSobrenome: %s", turmas[linha][coluna].sobrenome);
        printf("\nNumero usp: %i",  turmas[linha][coluna].nusp);
        printf("\nNota da P1: %.2f", turmas[linha][coluna].P1);
        printf("\nNota da P2: %.2f", turmas[linha][coluna].P2);
        printf("\nNota do trabalho: %.2f", turmas[linha][coluna].Tf);
        printf("\nMedia final: %.2f", turmas[linha][coluna].mf); printf("\n");
        turmas[linha][coluna].mf>= 5? printf("\nO aluno passou com media final %.2f", turmas[linha][coluna].mf) : printf("\nO aluno NAO passou! A media final foi de %.2f", turmas[linha][coluna].mf);
}

int procura_aluno_rec( aluno **turmas, int pos, int n_alunos[], char nome_proc[], char sobrenome_proc[], int i){
    
    if(pos >n_alunos[i])
        return -1;

    if(strcmp(nome_proc, turmas[i][pos].nome)==0){
        if(strcmp(sobrenome_proc, turmas[i][pos].sobrenome)==0){
            printf("\nAluno Enconrado com sucesso: ");
            return pos;
        } else{
            pos= pos + 1;
            procura_aluno_rec(turmas, pos, n_alunos[i], nome_proc, sobrenome_proc, i);
        }
    } else{
        pos= pos + 1;
        procura_aluno_rec(turmas, pos, n_alunos[i], nome_proc, sobrenome_proc, i);
    }
}

void procura_aluno_base( aluno **turmas, int n_alunos[], int n_turmas){
   
    char nome_proc[15], sobrenome_proc[15];
    int pos=0;
    int aux=0;
    //system("clear");
        
    printf("\nDigite o nome do aluno procurado: "); scanf("%s[^\n]", nome_proc);
    printf("\nSobrenome: "); scanf("%s[^\n]", sobrenome_proc);

    for(int i=0; i<n_turmas; i++){    
        pos= procura_aluno_rec(turmas, pos, n_alunos, nome_proc, sobrenome_proc, i);
        if(pos!= -1){
            aux= i;
            i=n_turmas;
        }
    }
    pos== -1? printf("\nvish... vamo ter que comecar a busca dnv\n") : printa( turmas, pos, aux);
}

void estats( aluno **turmas, int n_alunos[], int n_turmas){
    
    int i=0, j=0;
    float **matriz= (float **)calloc(10, sizeof(float));
    while(i<10){
        matriz[i]= (float *)calloc( 5, sizeof(float));  
        i++;
    } i=0;
    
    while(i<10){
        while(j<5){
            matriz[i][j]=0;
            j++;
        }
        i++;
    }

    /*  |turmas = | media P1 | media P2 | media trabalho | media final | porcentagem de aprovados |
        |------ = |----------|----------|----------------|-------------|--------------------------|
        |turma1 = |    0     |    0     |      0         |     0       |            0             |                          |
        |turma2 = |    0     |    0     |      0         |     0       |            0             |                          |
        |turma3 = |    0     |    0     |      0         |     0       |            0             |                          |
        |turma4 = |    0     |    0     |      0         |     0       |            0             |                          |
    ...
    */
    printf("\n| turmas = | media P1 | media P2 | media trabalho | media final | porcentagem de aprovados |");
    printf("\n|------  = |----------|----------|----------------|-------------|--------------------------|");
    while(i<(n_turmas)){

        while(j<n_alunos[i]){ // media P1
            matriz[i][0]=matriz[i][0] + turmas[i][j].P1;
            j++;
        }j=0;
        matriz[i][0]= (matriz[i][0])/(n_alunos[i]);

       while(j<n_alunos[i]){ // media P2
            matriz[i][1]=matriz[i][1] + turmas[i][j].P2;
            j++;
        } j=0;
        matriz[i][1]= (matriz[i][1])/(n_alunos[i]);

       while(j<n_alunos[i]){ // media Tf
            matriz[i][2]=matriz[i][2] + turmas[i][j].Tf;
            j++;
        }j=0;
        matriz[i][2]= (matriz[i][2])/(n_alunos[i]);

        while(j<n_alunos[i]){ // media mf
            matriz[i][3]=matriz[i][3] + turmas[i][j].mf;
            j++;
        } j=0;
        matriz[i][3]= (matriz[i][3])/(n_alunos[i]);

        while(j<n_alunos[i]){ // porcentagem de aprovados
            turmas[i][j].mf>4 ? (matriz[i][4]=matriz[i][4]+1) : (matriz[i][4]=matriz[i][4]+0); 
            j++;
        } j=0;
        matriz[i][4]= (matriz[i][4])/(n_alunos[i]);
    
        printf("\n|turma %i = |    %.2f     |    %.2f     |     %.2f         |    %.2f      |          %.2f            |", i+1, matriz[i][0], matriz[i][1], matriz[i][2], matriz[i][3], matriz[i][4]);
    i++;
    }
    //for(int f=0; f<n_turmas+1; f++)
    //    free(matriz[f]);
    //free(matriz);    
    
}

void salvar_file(int *n_turmas){
    
    typedef struct {char nome[15];} tipo_nome; 
    tipo_nome nome_file[*n_turmas];
    for(int i= 0; i< n_turmas; i++){
        printf("\nDigite o nome do arquivo #%i para armazenar as informações dos turmas: ", i); scanf("%s", nome_file);
        FILE *file= fopen(nome_file, "w");
        //pronto no arquivo "teste_gerenciador.c" copiar e colar dps de terminar a separação de turmas
        //fwrite();
    }
}

int main(int argc, char *argv[]){

   
    int acao;
    int i=0;
    //int *n_alunos= ( int *)malloc(10*sizeof(int));
    int n_alunos[10];
    int n_turmas=0;
    i=0;

    aluno **turmas= (aluno **)calloc( 10, sizeof(aluno)); 
    for(i=0; i<10; i++)
        turmas[i]= (aluno *)calloc( 10, sizeof(aluno));
    
       /*     |aluno 1 | aluno 2 | aluno 3 |aluno 4 | aluno 5 | aluno 6 | ...
    ---------------------------------------------------------------------
    turma 1 = |        |         |         |        |         |         |
    turma 2 = |        |         |         |        |         |         |
    turma 3 = |        |         |         |        |         |         |
    turma 4 = |        |         |         |        |         |         |
    ...
    */
    
    while(1){
        
        menu();
        printf("\nDigite a acao que deseja realizar: "); scanf("%d", &acao);
        
        switch (acao){
        
        case 1:    
            system("clear");
            criar_turma( n_alunos, n_turmas);
            info_alunos( turmas, n_alunos, n_turmas);
            n_turmas++;
            break;
        case 2:    
            system("clear");
            procura_aluno_base( turmas, n_alunos, n_turmas);
            break;
        case 3:  
            system("clear");
            estats(turmas, n_alunos, n_turmas);
            break;
        case 4:
            system("clear");   
            for(int i=0; i<10; i++){
                for(int j=0; j<10; j++){
                    printf(" %.1f ", turmas[i][j].P1);
                } printf("\n");
            }
            break;
        case 5:    
            system("clear");
            printf("\nEncerrando o sistema...");
            for(int f=0; f<n_alunos; f++)
                free(turmas[f]);
            free(turmas);
            free(n_alunos);
            exit(0);
            break;
        default:
            break;
        }
        
    }

    printf("\n\n");
return 0; 
}
